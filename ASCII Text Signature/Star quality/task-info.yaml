type: edu
custom_name: stage2
files:
- name: src/signature/Main.kt
  visible: true
  text: "package signature\n\nfun main() {\n    println(\"\"\"\n      _____________\n\
    \     | Hyper Skill |\n      ¯¯¯¯¯¯¯¯¯¯¯¯¯   \n    \"\"\".trimIndent())\n}\n"
  learner_created: false
- name: test/GeneratorTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import signature.MainKt;

    public abstract class GeneratorTest<T> extends StageTest<T> {
        public GeneratorTest() {
            super(MainKt.class);
        }
    }
  learner_created: false
- name: test/TestCaseHelpers.kt
  visible: false
  text: |+
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testcase.TestCase


    /** Default testCase. */
    fun <T> testCase(attach: T, input: String) = TestCase<T>().apply {
        setInput(input)
        setAttach(attach)
    }
    class InputClue(
            val input: String,
            val isPrivate: Boolean = false,
            /** Hint will be printed even for private tests. */
            val hint: String? = null
    ) {

        /** Ciphers [message] or adds a [hint] to the error if it is not null. */
        fun toFailure(message: String): CheckResult {
            if (isPrivate) {
                return CheckResult.wrong("Incorrect output. This is a private test. " + (hint ?: ""))
            } else {
                return CheckResult.wrong("$message ${hint ?: ""}")
            }
        }
    }

    fun inputCase(
            input: String,
            isPrivate: Boolean = false,
            hint: String? = null
    ) = testCase(InputClue(input, isPrivate, hint), input)


  learner_created: false
feedback_link: https://hyperskill.org/projects/71/stages/391/implement
status: Solved
record: 1
