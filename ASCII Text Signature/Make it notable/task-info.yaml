type: edu
custom_name: stage3
files:
- name: src/signature/Main.kt
  visible: true
  text: "package signature\n\nimport java.util.*\n\nval scanner = Scanner(System.`in`)\n\
    \nval name = scanner.next()\nval lastName = scanner.next()\nval size = name.length\
    \ + lastName.length + 5\nvar stars = \"\"\nvar starNum = 0\n\nval stringBuilder:\
    \ StringBuilder = StringBuilder()\n\nfun main() {\n    while (size > starNum)\
    \ {\n        stringBuilder.append(\"*\")\n        stars = stringBuilder.toString()\n\
    \        starNum++\n    }\n    println(\"\"\"\n     $stars\n     * $name $lastName\
    \ *\n     $stars   \n    \"\"\".trimIndent())\n}\n"
  learner_created: false
- name: test/GeneratorTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import signature.MainKt;

    public abstract class GeneratorTest<T> extends StageTest<T> {
        public GeneratorTest() {
            super(MainKt.class);
        }
    }
  learner_created: false
- name: test/TestCaseHelpers.kt
  visible: false
  text: |+
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testcase.TestCase


    /** Default testCase. */
    fun <T> testCase(attach: T, input: String) = TestCase<T>().apply {
        setInput(input)
        setAttach(attach)
    }
    class InputClue(
            val input: String,
            val isPrivate: Boolean = false,
            /** Hint will be printed even for private tests. */
            val hint: String? = null
    ) {

        /** Ciphers [message] or adds a [hint] to the error if it is not null. */
        fun toFailure(message: String): CheckResult {
            if (isPrivate) {
                return CheckResult.wrong("Incorrect output. This is a private test. " + (hint ?: ""))
            } else {
                return CheckResult.wrong("$message ${hint ?: ""}")
            }
        }
    }

    fun inputCase(
            input: String,
            isPrivate: Boolean = false,
            hint: String? = null
    ) = testCase(InputClue(input, isPrivate, hint), input)


  learner_created: false
- name: test/Task3Test.kt
  visible: false
  text: |2

    import org.hyperskill.hstest.testcase.CheckResult


    class Task3Test : GeneratorTest<InputClue>() {

        override fun generate() = listOf(
                inputCase("Bill Gates\nVIP",
                        hint = "This test corresponds to the example #1."),

                inputCase("Tom Smith\nWorker",
                        hint = "This test corresponds to the example #2."),

                inputCase("Mr Anonimous\nParticipant",
                        hint = "This test corresponds to the example #3."),

                inputCase("X Y\nVeryVeryLoooooooooongSatus",
                        hint = "This test checks a long status with even length."),

                inputCase("X Y\nVeryVeryLooooooooooongSatus", true,
                        "This test checks a long status with uneven length."),

                inputCase("X Y\nStatus  with spaces",
                        hint = "Status should be printed with the " +
                                "same spaces as original, but name " +
                                "and surname shouldn't contain spaces."),

                inputCase("X Y\nStatus with   spaces!!!", true),

                inputCase(('a'..'z').joinToString("") + " Ivan\nHello", true,
                        hint = "This test checks all possible letters.")
        )

        private inline fun checkBadgeBorder(badge: String, onFailure: (msg: String) -> Unit) {
            val lines = badge.split("\n")

            if (lines.map { it.length }.toSet().size != 1) {
                onFailure("Your border is not rectangular.")
                return
            }
            if (lines.size < 2) {
                onFailure("Your border is not rectangular.")
                return
            }
            if (lines.first().any { it != '*' } || lines.last() != lines.first()) {
                onFailure("Your top and bottom edges don't consist of '*'.")
                return
            }
            if (!lines.drop(1).dropLast(1).all { it.startsWith("* ") && it.endsWith(" *") }) {
                onFailure("Your left and right edges don't consist of '*' with one space padding..")
                return
            }
        }

        /** Compare height, indentation and line contents. */
        private inline fun compareBadges(user: String, author: String, onFailure: (msg: String) -> Unit) {
            val userLines = user.split("\n")
            val authorLines = author.split("\n")

            if (userLines.size != authorLines.size) {
                onFailure("Signature height is incorrect: ${userLines.size} lines instead of ${authorLines.size}.")
                return
            }

            userLines.zip(authorLines)
                    .forEach { (userStr, authorStr) ->
                        if (userStr.trim('*', ' ') != authorStr.trim('*', ' ')) {
                            onFailure("Some line in your signature is incorrect.")
                            return
                        } else if (userStr != authorStr) {
                            onFailure("Some indentation in your signature is incorrect.")
                            return
                        }
                    }
        }


        override fun check(reply: String, clue: InputClue): CheckResult {
            val badgeStart = reply.indexOf('*')
            if (badgeStart == -1) {
                return CheckResult.wrong("Your output doesn't contain a signature, wrapped in '*' symbols.")
            }

            val userBadge = reply
                    .substring(badgeStart)
                    .trim('\n', ' ')

            checkBadgeBorder(userBadge) { errorMessage ->
                return CheckResult.wrong(errorMessage)
            }

            val badge = authors(clue.input)

            compareBadges(userBadge, badge) { errorMessage ->
                val (name, status) = clue.input.split("\n")
                return clue.toFailure("Wrong output for input lines \"$name\" and \"$status\". $errorMessage")
            }

            return CheckResult.correct()
        }
    }
  learner_created: false
- name: test/Authors.kt
  visible: false
  text: |
    import java.lang.IllegalStateException
    import java.util.*

    class Letter(
            val rows: List<String>
    ) {

        init {
            if (rows.size != 3) {
                throw IllegalArgumentException("Letter $rows must have 3 rows.")
            }
            if (rows.distinctBy { it.length }.size != 1) {
                throw IllegalStateException("Bad letter. Not equal width in lines: ${rows.distinctBy { it.length }}")
            }
        }

        override fun toString() = rows.joinToString("\n")

        val width get() = rows[0]
    }

    val font = """
    ____ ___  ____ ___  ____ ____ ____ _  _ _  _ _  _ _    _  _ _  _ ____ ___  ____ ____ ____ ___ _  _ _  _ _ _ _ _  _ _   _ ___+
    |__| |__] |    |  \ |___ |___ | __ |__| |  | |_/  |    |\/| |\ | |  | |__] |  | |__/ [__   |  |  | |  | | | |  \/   \_/    /+
    |  | |__] |___ |__/ |___ |    |__] |  | | _| | \_ |___ |  | | \| |__| |    |_\| |  \ ___]  |  |__|  \/  |_|_| _/\_   |    /__
    """.trim('\n').replace('+', ' ') // this works so, because someone (like stepik) possibly deletes trailing spaces in lines.


    // type your solution here

    fun makeLetters(): Map<Char, Letter> {
        val lines = font.split('\n')

        val letterBuilders = List(3) { StringBuilder() }
        val letters = mutableListOf<Letter>()

        for (i in 0 until lines[0].length) {
            val slice = lines.map { it[i] }

            if (slice.all { it == ' ' }) {
                letters += Letter(letterBuilders.map { it.toString() })
                letterBuilders.forEach { it.clear() }
            } else {
                letterBuilders.zip(slice).forEach { (b, s) -> b.append(s) }
            }
        }
        // Don't forget about the last!
        letters += Letter(letterBuilders.map { it.toString() })

        val charsToLetters = letters.mapIndexed { i, letter -> 'a' + i to letter }.toMap().toMutableMap()
        charsToLetters[' '] = Letter(List(3) { "    " })
        return charsToLetters
    }

    /** Wrap with asterisks. */
    fun framed(lines: List<String>): String {

        val builder = StringBuilder()
        builder.append("*".repeat(lines[0].length + 6) + "\n")
        lines.forEach { line -> builder.append("*  $line  *\n") }
        builder.append("*".repeat(lines[0].length + 6))
        return builder.toString()
    }

    fun centeredLines(lines: List<String>): List<String> {
        val maxLen = lines.map { it.length }.max()!!

        return lines.map { line ->
            val need = maxLen - line.length
            " ".repeat(need / 2) + line + " ".repeat((need + 1) / 2)
        }
    }

    fun authors(input: String): String {
        val scanner = Scanner(input)
        val name = scanner.next() + " " + scanner.next()
        scanner.nextLine()
        val status = scanner.nextLine()

        val letters = makeLetters()
        val nameLetters = name.toLowerCase().map { letters[it]!! }

        val lines = (0..2).map { i ->
            nameLetters.map { it.rows[i] }.joinToString(" ")
        } + status

        return framed(centeredLines(lines))
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/71/stages/392/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/71/stages/392/implement">JetBrains
    Academy</a>
  time: Fri, 04 Sep 2020 20:42:12 UTC
record: 3
